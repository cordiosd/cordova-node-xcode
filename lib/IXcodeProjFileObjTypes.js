"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//  Contains all types/interfaces used in a PbxProject
exports.cPBXEmbedFrameworksBuildPhase = 'PBXEmbedFrameworksBuildPhase';
exports.cPBXBuildFile = 'PBXBuildFile';
exports.cPBXBuildPhase = 'PBXBuildPhase';
exports.cPBXAppleScriptBuildPhase = 'PBXAppleScriptBuildPhase';
exports.cPBXCopyFilesBuildPhase = 'PBXCopyFilesBuildPhase';
exports.cPBXFrameworksBuildPhase = 'PBXFrameworksBuildPhase';
exports.cPBXHeadersBuildPhase = 'PBXHeadersBuildPhase';
exports.cPBXResourcesBuildPhase = 'PBXResourcesBuildPhase';
exports.cPBXShellScriptBuildPhase = 'PBXShellScriptBuildPhase';
exports.cPBXSourcesBuildPhase = 'PBXSourcesBuildPhase';
exports.cPBXBuildRule = 'PBXBuildRule';
exports.cPBXContainerItemProxy = 'PBXContainerItemProxy';
exports.cPBXFileReference = 'PBXFileReference';
exports.cPBXGroup = 'PBXGroup';
exports.cPBXTarget = 'PBXTarget';
exports.cPBXAggregateTarget = 'PBXAggregateTarget';
exports.cPBXLegacyTarget = 'PBXLegacyTarget';
exports.cPBXNativeTarget = 'PBXNativeTarget';
exports.cPBXProject = 'PBXProject';
exports.cPBXReferenceProxy = 'PBXReferenceProxy';
exports.cPBXTargetDependency = 'PBXTargetDependency';
exports.cPBXVariantGroup = 'PBXVariantGroup';
exports.cXCBuildConfiguration = 'XCBuildConfiguration';
exports.cXCConfigurationList = 'XCConfigurationList';
exports.cXCVersionGroup = 'XCVersionGroup';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSVhjb2RlUHJvakZpbGVPYmpUeXBlcy5qcyIsInNvdXJjZVJvb3QiOiIuLi9zcmMvdHMvIiwic291cmNlcyI6WyJsaWIvSVhjb2RlUHJvakZpbGVPYmpUeXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLHNEQUFzRDtBQUN6QyxRQUFBLDZCQUE2QixHQUFHLDhCQUE4QixDQUFDO0FBQy9ELFFBQUEsYUFBYSxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFBLGNBQWMsR0FBRyxlQUFlLENBQUM7QUFDakMsUUFBQSx5QkFBeUIsR0FBRywwQkFBMEIsQ0FBQztBQUN2RCxRQUFBLHVCQUF1QixHQUFHLHdCQUF3QixDQUFDO0FBQ25ELFFBQUEsd0JBQXdCLEdBQUcseUJBQXlCLENBQUM7QUFDckQsUUFBQSxxQkFBcUIsR0FBRyxzQkFBc0IsQ0FBQztBQUMvQyxRQUFBLHVCQUF1QixHQUFHLHdCQUF3QixDQUFDO0FBQ25ELFFBQUEseUJBQXlCLEdBQUcsMEJBQTBCLENBQUM7QUFDdkQsUUFBQSxxQkFBcUIsR0FBRyxzQkFBc0IsQ0FBQztBQUMvQyxRQUFBLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDL0IsUUFBQSxzQkFBc0IsR0FBRyx1QkFBdUIsQ0FBQztBQUNqRCxRQUFBLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDO0FBQ3ZDLFFBQUEsU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUN2QixRQUFBLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFDekIsUUFBQSxtQkFBbUIsR0FBRyxvQkFBb0IsQ0FBQztBQUMzQyxRQUFBLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDO0FBQ3JDLFFBQUEsZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUM7QUFDckMsUUFBQSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQzNCLFFBQUEsa0JBQWtCLEdBQUcsbUJBQW1CLENBQUM7QUFDekMsUUFBQSxvQkFBb0IsR0FBRyxxQkFBcUIsQ0FBQztBQUM3QyxRQUFBLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDO0FBQ3JDLFFBQUEscUJBQXFCLEdBQUcsc0JBQXNCLENBQUM7QUFDL0MsUUFBQSxvQkFBb0IsR0FBRyxxQkFBcUIsQ0FBQztBQUM3QyxRQUFBLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElQYnhGaWxlU2V0dGluZ3MsIFhDX1NPVVJDRVRSRUUsIFhDX0VOQ09ESU5HX1RZUEUsIFhDX0ZJTEVUWVBFIH0gZnJvbSBcIi4vUGJ4RmlsZURlZlwiO1xuaW1wb3J0IHsgWENfUFJPSl9VVUlEIH0gZnJvbSBcIi4vSVhjb2RlUHJvakZpbGVTaW1wbGVUeXBlc1wiO1xuXG4vLyAgQ29udGFpbnMgYWxsIHR5cGVzL2ludGVyZmFjZXMgdXNlZCBpbiBhIFBieFByb2plY3RcbmV4cG9ydCBjb25zdCBjUEJYRW1iZWRGcmFtZXdvcmtzQnVpbGRQaGFzZSA9ICdQQlhFbWJlZEZyYW1ld29ya3NCdWlsZFBoYXNlJztcbmV4cG9ydCBjb25zdCBjUEJYQnVpbGRGaWxlID0gJ1BCWEJ1aWxkRmlsZSc7XG5leHBvcnQgY29uc3QgY1BCWEJ1aWxkUGhhc2UgPSAnUEJYQnVpbGRQaGFzZSc7XG5leHBvcnQgY29uc3QgY1BCWEFwcGxlU2NyaXB0QnVpbGRQaGFzZSA9ICdQQlhBcHBsZVNjcmlwdEJ1aWxkUGhhc2UnO1xuZXhwb3J0IGNvbnN0IGNQQlhDb3B5RmlsZXNCdWlsZFBoYXNlID0gJ1BCWENvcHlGaWxlc0J1aWxkUGhhc2UnO1xuZXhwb3J0IGNvbnN0IGNQQlhGcmFtZXdvcmtzQnVpbGRQaGFzZSA9ICdQQlhGcmFtZXdvcmtzQnVpbGRQaGFzZSc7XG5leHBvcnQgY29uc3QgY1BCWEhlYWRlcnNCdWlsZFBoYXNlID0gJ1BCWEhlYWRlcnNCdWlsZFBoYXNlJztcbmV4cG9ydCBjb25zdCBjUEJYUmVzb3VyY2VzQnVpbGRQaGFzZSA9ICdQQlhSZXNvdXJjZXNCdWlsZFBoYXNlJztcbmV4cG9ydCBjb25zdCBjUEJYU2hlbGxTY3JpcHRCdWlsZFBoYXNlID0gJ1BCWFNoZWxsU2NyaXB0QnVpbGRQaGFzZSc7XG5leHBvcnQgY29uc3QgY1BCWFNvdXJjZXNCdWlsZFBoYXNlID0gJ1BCWFNvdXJjZXNCdWlsZFBoYXNlJztcbmV4cG9ydCBjb25zdCBjUEJYQnVpbGRSdWxlID0gJ1BCWEJ1aWxkUnVsZSc7XG5leHBvcnQgY29uc3QgY1BCWENvbnRhaW5lckl0ZW1Qcm94eSA9ICdQQlhDb250YWluZXJJdGVtUHJveHknO1xuZXhwb3J0IGNvbnN0IGNQQlhGaWxlUmVmZXJlbmNlID0gJ1BCWEZpbGVSZWZlcmVuY2UnO1xuZXhwb3J0IGNvbnN0IGNQQlhHcm91cCA9ICdQQlhHcm91cCc7XG5leHBvcnQgY29uc3QgY1BCWFRhcmdldCA9ICdQQlhUYXJnZXQnO1xuZXhwb3J0IGNvbnN0IGNQQlhBZ2dyZWdhdGVUYXJnZXQgPSAnUEJYQWdncmVnYXRlVGFyZ2V0JztcbmV4cG9ydCBjb25zdCBjUEJYTGVnYWN5VGFyZ2V0ID0gJ1BCWExlZ2FjeVRhcmdldCc7XG5leHBvcnQgY29uc3QgY1BCWE5hdGl2ZVRhcmdldCA9ICdQQlhOYXRpdmVUYXJnZXQnO1xuZXhwb3J0IGNvbnN0IGNQQlhQcm9qZWN0ID0gJ1BCWFByb2plY3QnO1xuZXhwb3J0IGNvbnN0IGNQQlhSZWZlcmVuY2VQcm94eSA9ICdQQlhSZWZlcmVuY2VQcm94eSc7XG5leHBvcnQgY29uc3QgY1BCWFRhcmdldERlcGVuZGVuY3kgPSAnUEJYVGFyZ2V0RGVwZW5kZW5jeSc7XG5leHBvcnQgY29uc3QgY1BCWFZhcmlhbnRHcm91cCA9ICdQQlhWYXJpYW50R3JvdXAnO1xuZXhwb3J0IGNvbnN0IGNYQ0J1aWxkQ29uZmlndXJhdGlvbiA9ICdYQ0J1aWxkQ29uZmlndXJhdGlvbic7XG5leHBvcnQgY29uc3QgY1hDQ29uZmlndXJhdGlvbkxpc3QgPSAnWENDb25maWd1cmF0aW9uTGlzdCc7XG5leHBvcnQgY29uc3QgY1hDVmVyc2lvbkdyb3VwID0gJ1hDVmVyc2lvbkdyb3VwJztcblxuXG5leHBvcnQgdHlwZSBJU0FfQlVJTERfUEhBU0VfVFlQRSA9XG4gICAgJ1BCWEJ1aWxkUGhhc2UnIHxcbiAgICAnUEJYQXBwbGVTY3JpcHRCdWlsZFBoYXNlJyB8XG4gICAgJ1BCWENvcHlGaWxlc0J1aWxkUGhhc2UnIHxcbiAgICAnUEJYRnJhbWV3b3Jrc0J1aWxkUGhhc2UnIHxcbiAgICAnUEJYSGVhZGVyc0J1aWxkUGhhc2UnIHxcbiAgICAnUEJYU2hlbGxTY3JpcHRCdWlsZFBoYXNlJyB8XG4gICAgJ1BCWFNvdXJjZXNCdWlsZFBoYXNlJyB8XG4gICAgJ1BCWEVtYmVkRnJhbWV3b3Jrc0J1aWxkUGhhc2UnIHxcbiAgICAnUEJYUmVzb3VyY2VzQnVpbGRQaGFzZSc7XG5cbmV4cG9ydCB0eXBlIElTQV9HUk9VUF9UWVBFID1cbiAgICAnUEJYR3JvdXAnIHxcbiAgICAnUEJYVmFyaWFudEdyb3VwJztcblxuLyoqIEV2ZXJ5IElTZWN0aW9uT2JqZWN0IGlzIGluIGEgc2VjdGlvblxuICogd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBJU0FfVFlQRSBvZiB0aGVcbiAqIG9iamVjdC5cbiAqIFxuICogVGhlIG90aGVyIHByb3BlcnRpZXMgY2hhbmdlIGRlcGVuZGluZyBvbiB0aGUgdHlwZVxuICogb2Ygb2JqZWN0LlxuICovXG5leHBvcnQgdHlwZSBJU0FfVFlQRSA9IC8vIExpc3QgYnVpbHQgbW9zdGx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL01vbm9iamMvbW9ub2JqYy10b29sc1xuICAgIC8vICBHcm91cGluZyBvZiB0eXBlcyBcbiAgICBJU0FfQlVJTERfUEhBU0VfVFlQRSB8XG4gICAgSVNBX0dST1VQX1RZUEUgfFxuICAgICdQQlhCdWlsZEZpbGUnIHxcbiAgICAnUEJYQnVpbGRSdWxlJyB8XG4gICAgJ1BCWENvbnRhaW5lckl0ZW1Qcm94eScgfFxuICAgICdQQlhGaWxlUmVmZXJlbmNlJyB8XG4gICAgJ1BCWFRhcmdldCcgfFxuICAgICdQQlhBZ2dyZWdhdGVUYXJnZXQnIHxcbiAgICAnUEJYTGVnYWN5VGFyZ2V0JyB8XG4gICAgJ1BCWE5hdGl2ZVRhcmdldCcgfFxuICAgICdQQlhQcm9qZWN0JyB8XG4gICAgJ1BCWFJlZmVyZW5jZVByb3h5JyB8XG4gICAgJ1BCWFRhcmdldERlcGVuZGVuY3knIHxcbiAgICAnWENCdWlsZENvbmZpZ3VyYXRpb24nIHxcbiAgICAnWENDb25maWd1cmF0aW9uTGlzdCcgfFxuICAgICdYQ1ZlcnNpb25Hcm91cCc7IC8vIEZvdW5kIFhDVmVyc2lvbkdyb3VwIGluIGNvcmRvdmEtbm9kZS14Y29kZSBhbmQgbm90IE1vbm9iamMuVG9vbHMgKGFzc3VtcHRpb24gaXMgaXQgaXMgbmV3ZXIpXG5cblxuZXhwb3J0IGludGVyZmFjZSBJQ2hpbGRMaXN0RW50cnkge1xuICAgIC8vIFNhbXBsZSBmaWxlIGZvcm1hdFxuICAgIC8vIGJ1aWxkUGhhc2VzID0gKFxuICAgIC8vICAgICAgICAgQTgwNjcyRTEyMzNEMkE4NDAwM0VBNkJCIC8qIFNvdXJjZXMgKi8sXG4gICAgLy8gICAgICAgICBBODA2NzJFMjIzM0QyQTg0MDAzRUE2QkIgLyogRnJhbWV3b3JrcyAqLyxcbiAgICAvLyAgICAgICAgIEE4MDY3MkUzMjMzRDJBODQwMDNFQTZCQiAvKiBSZXNvdXJjZXMgKi8sXG4gICAgLy8gKTtcbiAgICBjb21tZW50OiBzdHJpbmc7IC8vIFN0cmluZyBzdWNoIGFzIFNvdXJjZXMsIEZyYW1ld29ya3MsIFJlc291cmNlc1xuICAgIHZhbHVlOiBzdHJpbmc7IC8vICdBODA2Li4uJ1xufVxuXG5cbi8qKiBCYXNlIGludGVyZmFjZSBmb3IgYWxsIG9mIHRoZSBvYmplY3QgdHlwZXMgdGhhdCBhcmVcbiAqIGluIHByb2plY3Qgc2VjdGlvbnMuXG4gKiBcbiAqIEFsbCBpbnRlcmZhY2VzIHRoYXQgZXh0ZW5kIGZyb20gdGhpcyB0aGF0IGFyZSBjb25jcmV0ZSAoZmluYWwpIGludGVyZmFjZXNcbiAqIGhhdmUgYW4gaXNhIHRoYXQgbWF0Y2hlcyB0aGUgaW50ZXJmYWNlIG5hbWUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUEJYT2JqZWN0QmFzZSB7XG4gICAgaXNhOiBJU0FfVFlQRTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQXR0cmlidXRlc0RpY3Rpb25hcnkge1xuICAgIFthdHRyaWJ1dGVOYW1lOiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJYUHJvamVjdCBleHRlbmRzIFBCWE9iamVjdEJhc2Uge1xuICAgIGF0dHJpYnV0ZXM6IElBdHRyaWJ1dGVzRGljdGlvbmFyeTtcbiAgICBrbm93blJlZ2lvbnM/OiBzdHJpbmdbXTtcbiAgICB0YXJnZXRzOiBJQ2hpbGRMaXN0RW50cnlbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQQlhGaWxlRWxlbWVudCBleHRlbmRzIFBCWE9iamVjdEJhc2Uge1xuICAgIG5hbWU/OiBzdHJpbmc7XG59XG5cbi8qKiBpc2EgPT0gUEJYQnVpbGRGaWxlICovXG5leHBvcnQgaW50ZXJmYWNlIFBCWEJ1aWxkRmlsZSBleHRlbmRzIFBCWE9iamVjdEJhc2Uge1xuICAgIHNldHRpbmdzPzogSVBieEZpbGVTZXR0aW5ncztcbiAgICBmaWxlUmVmX2NvbW1lbnQ6IHN0cmluZztcbiAgICBmaWxlUmVmOiBYQ19QUk9KX1VVSUQ7XG59XG5cblxuLyoqXG4gKiBcbiAqIFNhbXBsZSBmcm9tIGZpbGUuXG4gKiAvICogQmVnaW4gWENCdWlsZENvbmZpZ3VyYXRpb24gc2VjdGlvbiAqIC8gXG4gQTgwNjcyRUYyMzNEMkE4NTAwM0VBNkJCIC8gKiBEZWJ1ZyAqIC8gPSB7IFxuICAgIGlzYSA9IFhDQnVpbGRDb25maWd1cmF0aW9uOyBcbiAgICBidWlsZFNldHRpbmdzID0geyBcbiAgICAgICAgICAgIENPREVfU0lHTl9JREVOVElUWSA9IFwiaVBob25lIERldmVsb3BlclwiOyBcbiAgICAgICAgICAgIENPREVfU0lHTl9TVFlMRSA9IEF1dG9tYXRpYzsgXG4gICAgICAgICAgICBERVZFTE9QTUVOVF9URUFNID0gSERaSEpGOVA5NzsgXG4gICAgICAgICAgICBJTkZPUExJU1RfRklMRSA9IFwiYWQtbm90aWZpY2F0aW9uLXNlcnZpY2UtZXh0ZW5zaW9uL0luZm8ucGxpc3RcIjsgXG4gICAgICAgICAgICBJUEhPTkVPU19ERVBMT1lNRU5UX1RBUkdFVCA9IDEwLjA7IFxuICAgICAgICAgICAgTERfUlVOUEFUSF9TRUFSQ0hfUEFUSFMgPSAoIFxuICAgICAgICAgICAgICAgICAgICBcIiQoaW5oZXJpdGVkKVwiLCBcbiAgICAgICAgICAgICAgICAgICAgXCJAZXhlY3V0YWJsZV9wYXRoL0ZyYW1ld29ya3NcIiwgXG4gICAgICAgICAgICAgICAgICAgIFwiQGV4ZWN1dGFibGVfcGF0aC8uLi8uLi9GcmFtZXdvcmtzXCIsIFxuICAgICAgICAgICAgKTsgXG4gICAgICAgICAgICBQUk9EVUNUX0JVTkRMRV9JREVOVElGSUVSID0gXCJjb20uaWhzYWRhLmVudC5zYW5kYm94LW5hdC1pb3MuYWQtbm90aWZpY2F0aW9uLXNlcnZpY2UtZXh0ZW5zaW9uXCI7IFxuICAgICAgICAgICAgUFJPRFVDVF9OQU1FID0gXCIkKFRBUkdFVF9OQU1FKVwiOyBcbiAgICAgICAgICAgIFNLSVBfSU5TVEFMTCA9IFlFUzsgXG4gICAgICAgICAgICBUQVJHRVRFRF9ERVZJQ0VfRkFNSUxZID0gXCIxLDJcIjsgXG4gICAgfTsgXG4gICAgbmFtZSA9IERlYnVnOyBcbn07IFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFhDQnVpbGRDb25maWd1cmF0aW9uIGV4dGVuZHMgUEJYT2JqZWN0QmFzZSB7XG4gICAgbmFtZTogc3RyaW5nO1xuXG4gICAgYnVpbGRTZXR0aW5nczogeyBbcHJvcDogc3RyaW5nXTogYW55IH07IC8vIEluY2x1ZGVzIG51bWJlcnMsIHN0cmluZ3MsIGFuZCBhcnJheXMgZnJvbSBzYW1wbGVcbn1cblxuLyoqXG4gKiBcbiAqIEl0IHNlZW1zIGxpa2UgdGhpcyBzaG91bGQgZXh0ZW5kIFBCWEdyb3VwLiAgXG4gKiBIb3dldmVyLCBhdCB0aGUgdGltZSBJIHdhcyBjb252ZXJ0aW5nIHRoZSBjb2RlIHRoZSBcbiAqIGpzIHRoYXQgY3JlYXRlZCB0aGlzIHN0cnVjdHVyZSBjcmVhdGVkIHRoZSBjaGlsZHJlbiBhc1xuICogYW4gYXJyYXkgb2YgdXVpZHMgKGZpbGUgcmVmZXJlbmNlcykgaW5zdGVhZCBvZiB0aGVcbiAqIHN0YW5kYXJkIGNoaWxkIHJlZmVyZW5jZXMuICBNeSBndXQgdGVsbHMgbWUgdGhpcyBpcyBjYXVzZWRcbiAqIGJ5IGEgZGlmZmljdWx0IHRvIGZvbGxvdyBjb2RlIGJhc2UgYW5kIG11bHRpcGxlIGF1dGhvcnMuICBCdXRcbiAqIEkgZG9uJ3Qga25vdyBzbyBJIGFtIGxlYXZpbmcgaXQgYXMgaXQgaXMgYW5kIG5vdCBkZXJpdmluZyBmcm9tIFBCWEdyb3VwLlxuICogaS5lLiBteSBnb2FsIGlzIGFuIHVuZGVyc3RhbmRhYmxlIHR5cGVzY3JpcHQgY29udmVyc2lvbiBhbmQgbm90IHRvIGZ1bmN0aW9uYWxseVxuICogY2hhbmdlIGxvZ2ljIHVubGVzcyBJIGFtIDEwMCUgY2VydGFpbiBpdCBpcyBicm9rZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBYQ1ZlcnNpb25Hcm91cCBleHRlbmRzIFBCWEZpbGVFbGVtZW50IHsgLy8gUEJYR3JvdXBcblxuICAgIGNoaWxkcmVuOiBYQ19QUk9KX1VVSURbXTtcbiAgICBjdXJyZW50VmVyc2lvbjogWENfUFJPSl9VVUlELFxuXG4gICAgcGF0aD86IHN0cmluZzsgLy8gbW9ubyBkaWQgbm90IGhhdmUgdGhpcy4gIHByZXYgbm9kZSB2ZXJzaW9uIGRpZC5cbiAgICBzb3VyY2VUcmVlPzogWENfU09VUkNFVFJFRTtcblxuICAgIC8vIFRPRE86ICBDaGFuZ2UgdGhpcyB0byBhIHNldCBvZiB2YWxpZCB0eXBlcy4gIEF0IHRpbWUgb2Ygd3JpdGluZywgSSBkb24ndCBoYXZlIGFueSBjbHVlIHdoYXQgdGhvc2UgYXJlLlxuICAgIHZlcnNpb25Hcm91cFR5cGU6IHN0cmluZzsgLy8gd3JhcHBlci54Y2RhdGFtb2RlbFxuXG4gICAgLy8gIFNhbXBsZSBjb2RlIHBvcHVsYXRpbmcgdGhpczpcbiAgICAvLyBjb25zdCBuZXdWZXJzaW9uR3JvdXAgOiBYQ1ZlcnNpb25Hcm91cCA9IHtcbiAgICAvLyAgICAgICAgICAgICBpc2E6ICdYQ1ZlcnNpb25Hcm91cCcsXG4gICAgLy8gICAgICAgICAgICAgY2hpbGRyZW46IGZpbGUubW9kZWxzLm1hcChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLmZpbGVSZWY7IH0pLFxuICAgIC8vICAgICAgICAgICAgIGN1cnJlbnRWZXJzaW9uOiBmaWxlLmN1cnJlbnRNb2RlbC5maWxlUmVmLFxuICAgIC8vICAgICAgICAgICAgIG5hbWU6IHBhdGguYmFzZW5hbWUoZmlsZS5wYXRoKSxcbiAgICAvLyAgICAgICAgICAgICBwYXRoOiBmaWxlLnBhdGgsXG4gICAgLy8gICAgICAgICAgICAgc291cmNlVHJlZTogJ1wiPGdyb3VwPlwiJyxcbiAgICAvLyAgICAgICAgICAgICB2ZXJzaW9uR3JvdXBUeXBlOiAnd3JhcHBlci54Y2RhdGFtb2RlbCdcbiAgICAvLyAgICAgICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgWENDb25maWd1cmF0aW9uTGlzdCBleHRlbmRzIFBCWE9iamVjdEJhc2Uge1xuICAgIGJ1aWxkQ29uZmlndXJhdGlvbnM6IElDaGlsZExpc3RFbnRyeVtdO1xuICAgIGRlZmF1bHRDb25maWd1cmF0aW9uSXNWaXNpYmxlOiBudW1iZXI7IC8vIFNhbXBsZSBzaG93ZWQgMC4gIEFzc3VtaW5nIDAgb3IgMS5cbiAgICBkZWZhdWx0Q29uZmlndXJhdGlvbk5hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBQQlhPYmplY3RCYXNlIHdpdGggaXNhID0gUEJYRmlsZVJlZmVyZW5jZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBCWEZpbGVSZWZlcmVuY2UgZXh0ZW5kcyBQQlhGaWxlRWxlbWVudCB7XG4gICAgLy8gIE5PVEU6ICBUaGVzZSBkZWZpbml0aW9ucyB3ZXJlIGluZmVycmVkIGFuZCBub3QgcmVzZWFyY2hlZC5cbiAgICAvLyAgU2FtcGxlczogIFxuICAgIC8vICAwNDg5NUQ3RjE5QTk0NTMyQUMyNTk5REIgLyogUG9kcy1zYW5kYm94LW5hdC1pb3NVSVRlc3RzLnJlbGVhc2UueGNjb25maWcgKi8gPSB7aXNhID0gUEJYRmlsZVJlZmVyZW5jZTsgaW5jbHVkZUluSW5kZXggPSAxOyBsYXN0S25vd25GaWxlVHlwZSA9IHRleHQueGNjb25maWc7IG5hbWUgPSBcIlBvZHMtc2FuZGJveC1uYXQtaW9zVUlUZXN0cy5yZWxlYXNlLnhjY29uZmlnXCI7IHBhdGggPSBcIlRhcmdldCBTdXBwb3J0IEZpbGVzL1BvZHMtc2FuZGJveC1uYXQtaW9zVUlUZXN0cy9Qb2RzLXNhbmRib3gtbmF0LWlvc1VJVGVzdHMucmVsZWFzZS54Y2NvbmZpZ1wiOyBzb3VyY2VUcmVlID0gXCI8Z3JvdXA+XCI7IH07XG4gICAgLy8gIDQ2QzY3QTA2RUY5MTU1NTUyMDk5ODlCOCAvKiBsaWJQb2RzLXNhbmRib3gtbmF0LWlvcy5hICovID0ge2lzYSA9IFBCWEZpbGVSZWZlcmVuY2U7IGV4cGxpY2l0RmlsZVR5cGUgPSBhcmNoaXZlLmFyOyBpbmNsdWRlSW5JbmRleCA9IDA7IHBhdGggPSBcImxpYlBvZHMtc2FuZGJveC1uYXQtaW9zLmFcIjsgc291cmNlVHJlZSA9IEJVSUxUX1BST0RVQ1RTX0RJUjsgfTtcbiAgICAvLyAgNjcxOTdFNjJEREExMzNBOTNGQzVCNjI1IC8qIFBvZHMtc2FuZGJveC1uYXQtaW9zVUlUZXN0cy5kZWJ1Zy54Y2NvbmZpZyAqLyA9IHtpc2EgPSBQQlhGaWxlUmVmZXJlbmNlOyBpbmNsdWRlSW5JbmRleCA9IDE7IGxhc3RLbm93bkZpbGVUeXBlID0gdGV4dC54Y2NvbmZpZzsgbmFtZSA9IFwiUG9kcy1zYW5kYm94LW5hdC1pb3NVSVRlc3RzLmRlYnVnLnhjY29uZmlnXCI7IHBhdGggPSBcIlRhcmdldCBTdXBwb3J0IEZpbGVzL1BvZHMtc2FuZGJveC1uYXQtaW9zVUlUZXN0cy9Qb2RzLXNhbmRib3gtbmF0LWlvc1VJVGVzdHMuZGVidWcueGNjb25maWdcIjsgc291cmNlVHJlZSA9IFwiPGdyb3VwPlwiOyB9O1xuICAgIC8vICBBNEIxRDcxNkM2N0U4RDNFRTBFRUQ2QUUgLyogUG9kcy1zYW5kYm94LW5hdC1pb3MuZGVidWcueGNjb25maWcgKi8gPSB7aXNhID0gUEJYRmlsZVJlZmVyZW5jZTsgaW5jbHVkZUluSW5kZXggPSAxOyBsYXN0S25vd25GaWxlVHlwZSA9IHRleHQueGNjb25maWc7IG5hbWUgPSBcIlBvZHMtc2FuZGJveC1uYXQtaW9zLmRlYnVnLnhjY29uZmlnXCI7IHBhdGggPSBcIlRhcmdldCBTdXBwb3J0IEZpbGVzL1BvZHMtc2FuZGJveC1uYXQtaW9zL1BvZHMtc2FuZGJveC1uYXQtaW9zLmRlYnVnLnhjY29uZmlnXCI7IHNvdXJjZVRyZWUgPSBcIjxncm91cD5cIjsgfTtcbiAgICAvLyAgQTg2RjdFQUYyMzIyRjBEOTAwMDkwNDVDIC8qIEdvb2dsZVNlcnZpY2UtSW5mby5wbGlzdCAqLyA9IHtpc2EgPSBQQlhGaWxlUmVmZXJlbmNlOyBmaWxlRW5jb2RpbmcgPSA0OyBsYXN0S25vd25GaWxlVHlwZSA9IHRleHQucGxpc3QueG1sOyBwYXRoID0gXCJHb29nbGVTZXJ2aWNlLUluZm8ucGxpc3RcIjsgc291cmNlVHJlZSA9IFwiPGdyb3VwPlwiOyB9O1xuICAgIC8vICBBODc0NzZCRTIzMTgzMURGMDA1NDg0RjQgLyogc2FuZGJveC1uYXQtaW9zVUlUZXN0cy54Y3Rlc3QgKi8gPSB7aXNhID0gUEJYRmlsZVJlZmVyZW5jZTsgZXhwbGljaXRGaWxlVHlwZSA9IHdyYXBwZXIuY2ZidW5kbGU7IGluY2x1ZGVJbkluZGV4ID0gMDsgcGF0aCA9IFwic2FuZGJveC1uYXQtaW9zVUlUZXN0cy54Y3Rlc3RcIjsgc291cmNlVHJlZSA9IEJVSUxUX1BST0RVQ1RTX0RJUjsgfTtcbiAgICAvLyAgQTg3NDc2QzAyMzE4MzFERjAwNTQ4NEY0IC8qIHNhbmRib3hfbmF0X2lvc1VJVGVzdHMubSAqLyA9IHtpc2EgPSBQQlhGaWxlUmVmZXJlbmNlOyBsYXN0S25vd25GaWxlVHlwZSA9IHNvdXJjZWNvZGUuYy5vYmpjOyBwYXRoID0gc2FuZGJveF9uYXRfaW9zVUlUZXN0cy5tOyBzb3VyY2VUcmVlID0gXCI8Z3JvdXA+XCI7IH07XG4gICAgcGF0aDogc3RyaW5nO1xuICAgIHNvdXJjZVRyZWU6IFhDX1NPVVJDRVRSRUU7XG4gICAgZmlsZUVuY29kaW5nPzogWENfRU5DT0RJTkdfVFlQRTtcbiAgICBsYXN0S25vd25GaWxlVHlwZT86IFhDX0ZJTEVUWVBFIHwgJ3Vua25vd24nOyAvLyBJcyB1bmtub3duIHZhbGlkIHRvIGJlIHdyaXR0ZW4gdG8gdGhlIGZpbGUuICBUaGUgdGVzdCBjYXNlcyB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZXJlIGNvZGVkIHNlZW0gdG8gYXNzdW1lIHNvIG9yIG5vdCBjb25zaWRlciB0aGlzLiAgQWxsb3dpbmcgJ3Vua25vd24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aXRob3V0IHRocm93aW5nIGFuIGVycm9yIGZvciBub3cuICBXaWxsIG1vZGlmeSB0aGlzIGxhdGVyIHdoZW4gd2UgZmluZCBvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICBpZiBlaXRoZXIgWENvZGUga25vd3MgYWJvdXQgJ3Vua25vd24nIG9yIHRoZSB0ZXN0IGNhc2VzIG5lZWQgdG8gYmUgbW9kaWZpZWQuXG4gICAgZXhwbGljaXRGaWxlVHlwZT86IFhDX0ZJTEVUWVBFO1xuICAgIC8qKiBcbiAgICAgKiBJcyBmaWxlIGluY2x1ZGVkIGluIHRoZSBpbmRleC5cbiAgICAgKiBPbmx5IHNlZW4gMCBvciAxICovXG4gICAgaW5jbHVkZUluSW5kZXg/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJYQnVpbGRQaGFzZUJhc2UgZXh0ZW5kcyBQQlhPYmplY3RCYXNlIHtcbiAgICBmaWxlczogSUNoaWxkTGlzdEVudHJ5W107XG4gICAgYnVpbGRBY3Rpb25NYXNrOiBudW1iZXI7XG4gICAgcnVuT25seUZvckRlcGxveW1lbnRQb3N0cHJvY2Vzc2luZzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBCWFNoZWxsU2NyaXB0QnVpbGRQaGFzZSBleHRlbmRzIFBCWEJ1aWxkUGhhc2VCYXNlIHtcblxuICAgIG5hbWU6IHN0cmluZztcbiAgICBpbnB1dFBhdGhzOiBzdHJpbmdbXTtcbiAgICBvdXRwdXRQYXRoczogc3RyaW5nW107XG4gICAgc2hlbGxQYXRoPzogc3RyaW5nO1xuICAgIHNoZWxsU2NyaXB0Pzogc3RyaW5nO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJYQ29weUZpbGVzQnVpbGRQaGFzZSBleHRlbmRzIFBCWEJ1aWxkUGhhc2VCYXNlIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZHN0UGF0aDogc3RyaW5nO1xuICAgIGRzdFN1YmZvbGRlclNwZWM6IG51bWJlcjtcblxuICAgIC8vICAgICAvKiBCZWdpbiBQQlhDb3B5RmlsZXNCdWlsZFBoYXNlIHNlY3Rpb24gKi8gXG4gICAgLy8gICAgIEE4MDY3MkVFMjMzRDJBODUwMDNFQTZCQiAvKiBFbWJlZCBBcHAgRXh0ZW5zaW9ucyAqLyA9IHsgXG4gICAgLy8gICAgICAgICBpc2EgPSBQQlhDb3B5RmlsZXNCdWlsZFBoYXNlOyBcbiAgICAvLyAgICAgICAgIGJ1aWxkQWN0aW9uTWFzayA9IDIxNDc0ODM2NDc7IFxuICAgIC8vICAgICAgICAgZHN0UGF0aCA9IFwiXCI7IFxuICAgIC8vICAgICAgICAgZHN0U3ViZm9sZGVyU3BlYyA9IDEzOyBcbiAgICAvLyAgICAgICAgIGZpbGVzID0gKCBcbiAgICAvLyAgICAgICAgICAgICAgICAgQTgwNjcyRUQyMzNEMkE4NTAwM0VBNkJCIC8qIGFkLW5vdGlmaWNhdGlvbi1zZXJ2aWNlLWV4dGVuc2lvbi5hcHBleCBpbiBFbWJlZCBBcHAgRXh0ZW5zaW9ucyAqLywgXG4gICAgLy8gICAgICAgICApOyBcbiAgICAvLyAgICAgICAgIG5hbWUgPSBcIkVtYmVkIEFwcCBFeHRlbnNpb25zXCI7IFxuICAgIC8vICAgICAgICAgcnVuT25seUZvckRlcGxveW1lbnRQb3N0cHJvY2Vzc2luZyA9IDA7IFxuICAgIC8vIH07IFxuICAgIC8vIC8qIEVuZCBQQlhDb3B5RmlsZXNCdWlsZFBoYXNlIHNlY3Rpb24gKi8gXG5cblxufVxuXG5cbi8qKiBQQlhPYmplY3Qgd2l0aCBpc2EgPSBQQlhTb3VyY2VzQnVpbGRQaGFzZSAqL1xuZXhwb3J0IGludGVyZmFjZSBQQlhTb3VyY2VzQnVpbGRQaGFzZSBleHRlbmRzIFBCWEJ1aWxkUGhhc2VCYXNlIHtcbiAgICAvLyBUT0RPXG59XG5cbi8qKiBQQlhPYmplY3Qgd2l0aCBpc2EgPSBQQlhSZXNvdXJjZXNCdWlsZFBoYXNlICovXG5leHBvcnQgaW50ZXJmYWNlIFBCWFJlc291cmNlc0J1aWxkUGhhc2UgZXh0ZW5kcyBQQlhCdWlsZFBoYXNlQmFzZSB7XG4gICAgLy8gVE9ET1xufVxuXG4vKiogUEJYT2JqZWN0IHdpdGggaXNhID0gUEJYRnJhbWV3b3Jrc0J1aWxkUGhhc2UgKi9cbmV4cG9ydCBpbnRlcmZhY2UgUEJYRnJhbWV3b3Jrc0J1aWxkUGhhc2UgZXh0ZW5kcyBQQlhCdWlsZFBoYXNlQmFzZSB7XG4gICAgLy8gVE9ET1xufVxuXG4vKiogUEJYT2JqZWN0IHdpdGggaXNhID0gUEJYRW1iZWRGcmFtZXdvcmtzQnVpbGRQaGFzZSAqL1xuZXhwb3J0IGludGVyZmFjZSBQQlhFbWJlZEZyYW1ld29ya3NCdWlsZFBoYXNlIGV4dGVuZHMgUEJYQnVpbGRQaGFzZUJhc2Uge1xuICAgIC8vIFRPRE9cbn1cblxuLyoqXG4gKiBTZWN0aW9uIG9iamVjdCB3aXRoIGFuIGlzYSA9IFBCWEdyb3VwIGZyb20gdGhlIFBCWEdyb3VwcyBzZWN0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBCWEdyb3VwIGV4dGVuZHMgUEJYRmlsZUVsZW1lbnQge1xuICAgIGNoaWxkcmVuOiBJQ2hpbGRMaXN0RW50cnlbXTtcbiAgICBwYXRoPzogc3RyaW5nOyAvLyBtb25vIGRpZCBub3QgaGF2ZSB0aGlzLiAgcHJldiBub2RlIHZlcnNpb24gZGlkLlxuICAgIHNvdXJjZVRyZWU/OiBYQ19TT1VSQ0VUUkVFO1xuICAgIC8vIFRPRE9cbn1cblxuZXhwb3J0IGludGVyZmFjZSBQQlhWYXJpYW50R3JvdXAgZXh0ZW5kcyBQQlhHcm91cCB7XG59XG5cbi8qKlxuICogXG4gKiBJbmZlcnJlZCBuZWVkIGZvciB0aGlzIGJ5IGNvcHlpbmcgTW9ub2JqYy5Ub29scyBtb2RlbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBCWFRhcmdldCBleHRlbmRzIFBCWE9iamVjdEJhc2Uge1xuXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHByb2R1Y3ROYW1lOiBzdHJpbmc7XG5cbiAgICBidWlsZENvbmZpZ3VyYXRpb25MaXN0OiBYQ19QUk9KX1VVSUQ7XG4gICAgYnVpbGRQaGFzZXM6IElDaGlsZExpc3RFbnRyeVtdO1xuICAgIGRlcGVuZGVuY2llczogSUNoaWxkTGlzdEVudHJ5W107XG59XG5cbi8qKlxuICogQSBQQlhPYmplY3Qgd2l0aCBhbiBpc2EgPSBQQlhOYXRpdmVUYXJnZXQgYW5kIHN0b3JlZCBpblxuICogdGhlIFBCWE5hdGl2ZVRhcmdldCBzZWN0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBCWE5hdGl2ZVRhcmdldCBleHRlbmRzIFBCWFRhcmdldCB7XG4gICAgLy8gcHJvamVjdFJlZmVyZW5jZTogWENfUFJPSl9VVUlEOyAvLyBEb24ndCBrbm93IHdoZXJlIHRoaXMgY2FtZSBmcm9tLlxuICAgIHByb2R1Y3RSZWZlcmVuY2U6IFhDX1BST0pfVVVJRDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBvZiBQUk9EVUNUX1RZUEUgd3JhcHBlZCBpbiBkb3VibGUgcXVvdGVzLlxuICAgICAqL1xuICAgIHByb2R1Y3RUeXBlOiBzdHJpbmc7IC8vICBcIlBST0RVQ1RfVFlQRVwiO1xuICAgIGJ1aWxkUnVsZXM6IElDaGlsZExpc3RFbnRyeVtdO1xuXG4gICAgLy8gIFNhbXBlIGNvZGVcbiAgICAvLyBpc2E6ICdQQlhOYXRpdmVUYXJnZXQnLFxuICAgIC8vIG5hbWU6ICdcIicgKyB0YXJnZXROYW1lICsgJ1wiJyxcbiAgICAvLyBwcm9kdWN0TmFtZTogJ1wiJyArIHRhcmdldE5hbWUgKyAnXCInLFxuICAgIC8vIHByb2R1Y3RSZWZlcmVuY2U6IHByb2R1Y3RGaWxlLmZpbGVSZWYsXG4gICAgLy8gcHJvZHVjdFR5cGU6ICdcIicgKyBwcm9kdWN0dHlwZUZvclRhcmdldHR5cGUodGFyZ2V0VHlwZSkgKyAnXCInLFxuICAgIC8vIGJ1aWxkQ29uZmlndXJhdGlvbkxpc3Q6IGJ1aWxkQ29uZmlndXJhdGlvbnMudXVpZCxcbiAgICAvLyBidWlsZFBoYXNlczogW10sXG4gICAgLy8gYnVpbGRSdWxlczogW10sXG4gICAgLy8gZGVwZW5kZW5jaWVzOiBbXVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJYVGFyZ2V0RGVwZW5kZW5jeSBleHRlbmRzIFBCWE9iamVjdEJhc2Uge1xuICAgIHRhcmdldDogWENfUFJPSl9VVUlELFxuICAgIHRhcmdldF9jb21tZW50OiBzdHJpbmcsXG4gICAgdGFyZ2V0UHJveHk6IFhDX1BST0pfVVVJRCxcbiAgICB0YXJnZXRQcm94eV9jb21tZW50OiBzdHJpbmdcblxuICAgIC8vICBTYW1ucG9sZSBmaWxlOlxuICAgIC8vIC8qIEJlZ2luIFBCWFRhcmdldERlcGVuZGVuY3kgc2VjdGlvbiAqL1xuICAgIC8vIEE4MDY3MkVDMjMzRDJBODUwMDNFQTZCQiAvKiBQQlhUYXJnZXREZXBlbmRlbmN5ICovID0ge1xuICAgIC8vICAgICBpc2EgPSBQQlhUYXJnZXREZXBlbmRlbmN5O1xuICAgIC8vICAgICB0YXJnZXQgPSBBODA2NzJFNDIzM0QyQTg0MDAzRUE2QkIgLyogYWQtbm90aWZpY2F0aW9uLXNlcnZpY2UtZXh0ZW5zaW9uICovO1xuICAgIC8vICAgICB0YXJnZXRQcm94eSA9IEE4MDY3MkVCMjMzRDJBODUwMDNFQTZCQiAvKiBQQlhDb250YWluZXJJdGVtUHJveHkgKi87XG4gICAgLy8gfTtcblxuXG4gICAgLy8gIFNhbXBsZSBjb2RlOlxuICAgIC8vIGlzYTogY1BCWFRhcmdldERlcGVuZGVuY3ksXG4gICAgLy8gdGFyZ2V0OiBkZXBlbmRlbmN5VGFyZ2V0VXVpZCxcbiAgICAvLyB0YXJnZXRfY29tbWVudDogbmF0aXZlVGFyZ2V0c1tkZXBlbmRlbmN5VGFyZ2V0Q29tbWVudEtleV0sXG4gICAgLy8gdGFyZ2V0UHJveHk6IGl0ZW1Qcm94eVV1aWQsXG4gICAgLy8gdGFyZ2V0UHJveHlfY29tbWVudDogY1BCWENvbnRhaW5lckl0ZW1Qcm94eVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJYQ29udGFpbmVySXRlbVByb3h5IGV4dGVuZHMgUEJYT2JqZWN0QmFzZSB7XG5cbiAgICBjb250YWluZXJQb3J0YWw6IFhDX1BST0pfVVVJRCxcbiAgICBjb250YWluZXJQb3J0YWxfY29tbWVudDogc3RyaW5nLFxuICAgIHByb3h5VHlwZTogbnVtYmVyLCAvLyBleGFtcGxlcyB1c2UgMVxuICAgIHJlbW90ZUdsb2JhbElEU3RyaW5nOiBYQ19QUk9KX1VVSUQsXG4gICAgcmVtb3RlSW5mbzogc3RyaW5nXG4gICAgLy8gICBTYW1wbGUgY29kZTpcbiAgICAvLyBjb250YWluZXJQb3J0YWw6IHByb2plY3RbJ3Jvb3RPYmplY3QnXSxcbiAgICAvLyBjb250YWluZXJQb3J0YWxfY29tbWVudDogcHJvamVjdFsncm9vdE9iamVjdF9jb21tZW50J10sXG4gICAgLy8gcHJveHlUeXBlOiAxLFxuICAgIC8vIHJlbW90ZUdsb2JhbElEU3RyaW5nOiBkZXBlbmRlbmN5VGFyZ2V0VXVpZCxcbiAgICAvLyByZW1vdGVJbmZvOiAobmF0aXZlVGFyZ2V0c1tkZXBlbmRlbmN5VGFyZ2V0VXVpZF0gYXMgUEJYTmF0aXZlVGFyZ2V0KS5uYW1lXG5cbn1cblxuIl19