"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var util = require("util");
// Old version used to use 'unknown'.  Removing this 
//  as we don't want to write this to the actual file.
//  using null instead.
// export type XC_FILETYPE = 'unknown' | XC_FILETYPE_KNOWN;
// const DEFAULT_FILETYPE: XC_FILETYPE = 'unknown';
var FILETYPE_BY_EXTENSION = {
    a: 'archive.ar',
    app: 'wrapper.application',
    appex: 'wrapper.app-extension',
    bundle: 'wrapper.plug-in',
    dylib: 'compiled.mach-o.dylib',
    framework: 'wrapper.framework',
    h: 'sourcecode.c.h',
    m: 'sourcecode.c.objc',
    markdown: 'text',
    mdimporter: 'wrapper.cfbundle',
    octest: 'wrapper.cfbundle',
    pch: 'sourcecode.c.h',
    plist: 'text.plist.xml',
    sh: 'text.script.sh',
    swift: 'sourcecode.swift',
    tbd: 'sourcecode.text-based-dylib-definition',
    xcassets: 'folder.assetcatalog',
    xcconfig: 'text.xcconfig',
    xcdatamodel: 'wrapper.xcdatamodel',
    xcodeproj: 'wrapper.pb-project',
    xctest: 'wrapper.cfbundle',
    xib: 'file.xib',
    strings: 'text.plist.strings'
};
function unquoted(text) {
    return typeof text != 'string' ? '' : text.replace(/(^")|("$)/g, '');
}
/**
 *
 * @param filePath
 * @returns undefined if unknown extension.
 */
function detectType(filePath) {
    var extension = path.extname(filePath).substring(1);
    var filetype = FILETYPE_BY_EXTENSION[unquoted(extension)];
    if (filetype == undefined) {
        return 'unknown';
    }
    else {
        return filetype;
    }
}
function defaultExtension(fileRef) {
    var filetype = (fileRef.lastKnownFileType && fileRef.lastKnownFileType != 'unknown') ? fileRef.lastKnownFileType : fileRef.explicitFileType;
    // Had removed the use of 'unknown'.  However, found that tests were demanding it.  Put back
    //  in for compatibility with existing clients. 
    //    var filetype = fileRef.lastKnownFileType && fileRef.lastKnownFileType != DEFAULT_FILETYPE ?
    //    fileRef.lastKnownFileType : fileRef.explicitFileType;
    for (var extension in FILETYPE_BY_EXTENSION) {
        if (FILETYPE_BY_EXTENSION.hasOwnProperty(unquoted(extension))) {
            if (FILETYPE_BY_EXTENSION[unquoted(extension)] === unquoted(filetype))
                return extension;
        }
    }
    return undefined;
}
//const DEFAULT_FILEENCODING: XC_ENCODING_TYPE = 4; // unused?
var ENCODING_BY_FILETYPE = {
    'sourcecode.c.h': 4,
    // 'sourcecode.c.h': 4,  duplicate key removed
    'sourcecode.c.objc': 4,
    'sourcecode.swift': 4,
    'text': 4,
    'text.plist.xml': 4,
    'text.script.sh': 4,
    'text.xcconfig': 4,
    'text.plist.strings': 4
};
/**
 * @param fileRef
 */
function defaultEncoding(fileRef) {
    var filetype = fileRef.lastKnownFileType || fileRef.explicitFileType;
    var encoding = ENCODING_BY_FILETYPE[unquoted(filetype)];
    if (encoding) {
        return encoding;
    }
    else {
        return undefined;
    }
}
var DEFAULT_GROUP = 'Resources';
var GROUP_BY_FILETYPE = {
    'archive.ar': 'Frameworks',
    'compiled.mach-o.dylib': 'Frameworks',
    'sourcecode.text-based-dylib-definition': 'Frameworks',
    'wrapper.framework': 'Frameworks',
    'embedded.framework': 'Embed Frameworks',
    'sourcecode.c.h': 'Resources',
    'sourcecode.c.objc': 'Sources',
    'sourcecode.swift': 'Sources'
};
function detectGroup(fileRef, opt) {
    if (opt.customFramework && opt.embed) {
        return GROUP_BY_FILETYPE['embedded.framework'];
    }
    var extension = path.extname(fileRef.basename).substring(1);
    if (extension === 'xcdatamodeld') {
        return 'Sources';
    }
    var filetype = fileRef.lastKnownFileType || fileRef.explicitFileType;
    var groupName = GROUP_BY_FILETYPE[unquoted(filetype)];
    return groupName ? groupName : DEFAULT_GROUP;
}
var SOURCETREE_BY_FILETYPE = {
    'compiled.mach-o.dylib': 'SDKROOT',
    'sourcecode.text-based-dylib-definition': 'SDKROOT',
    'wrapper.framework': 'SDKROOT'
};
var DEFAULT_SOURCETREE = '"<group>"';
var DEFAULT_PRODUCT_SOURCETREE = 'BUILT_PRODUCTS_DIR';
function detectSourcetree(fileRef) {
    var filetype = fileRef.lastKnownFileType || fileRef.explicitFileType, sourcetree = SOURCETREE_BY_FILETYPE[unquoted(filetype)];
    if (fileRef.explicitFileType) {
        return DEFAULT_PRODUCT_SOURCETREE;
    }
    if (fileRef.customFramework) {
        return DEFAULT_SOURCETREE;
    }
    if (!sourcetree) {
        return DEFAULT_SOURCETREE;
    }
    return sourcetree;
}
var PATH_BY_FILETYPE = {
    'compiled.mach-o.dylib': 'usr/lib/',
    'sourcecode.text-based-dylib-definition': 'usr/lib/',
    'wrapper.framework': 'System/Library/Frameworks/'
};
function defaultPath(fileRef, filePath) {
    if (fileRef.customFramework) {
        return filePath;
    }
    var filetype = fileRef.lastKnownFileType || fileRef.explicitFileType;
    var defaultPath = PATH_BY_FILETYPE[unquoted(filetype)];
    if (defaultPath) {
        return path.join(defaultPath, path.basename(filePath));
    }
    return filePath;
}
/** In memory instance for interacting with a conceptual PbxFile.
 * This is not part of the in memory model of the file contents.
 * This is turned into a PBXFileReference by the non exposed function
 * pbxFileReferenceObj used by the methods addToPbxFileReferenceSection and
 * removeFromPbxFileRefereneSection.
  */
var PbxFile = /** @class */ (function () {
    function PbxFile(filepath, opt) {
        var efOpt = opt || {};
        this.basename = path.basename(filepath);
        this.lastKnownFileType = efOpt.lastKnownFileType || detectType(filepath);
        this.group = detectGroup(this, efOpt);
        // for custom frameworks
        if (efOpt.customFramework == true) {
            this.customFramework = true;
            this.dirname = path.dirname(filepath).replace(/\\/g, '/');
        }
        this.path = defaultPath(this, filepath).replace(/\\/g, '/');
        this.fileEncoding = this.defaultEncoding = efOpt.defaultEncoding || defaultEncoding(this);
        // When referencing products / build output files
        if (efOpt.explicitFileType) {
            this.explicitFileType = efOpt.explicitFileType;
            this.basename = this.basename + '.' + defaultExtension(this);
            delete this.path;
            delete this.lastKnownFileType;
            delete this.group;
            delete this.defaultEncoding;
        }
        this.sourceTree = efOpt.sourceTree || detectSourcetree(this);
        this.includeInIndex = 0;
        if (efOpt.weak && efOpt.weak === true)
            this.settings = { ATTRIBUTES: ['Weak'] };
        if (efOpt.compilerFlags) {
            if (!this.settings)
                this.settings = {};
            this.settings.COMPILER_FLAGS = util.format('"%s"', efOpt.compilerFlags);
        }
        if (efOpt.embed && efOpt.sign) {
            if (!this.settings)
                this.settings = {};
            if (!this.settings.ATTRIBUTES)
                this.settings.ATTRIBUTES = [];
            this.settings.ATTRIBUTES.push('CodeSignOnCopy');
        }
    }
    return PbxFile;
}());
exports.PbxFile = PbxFile;
//# sourceMappingURL=data:application/json;base64,